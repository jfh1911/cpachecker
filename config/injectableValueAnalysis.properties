# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ------------------------------------------------------------------
# This configuration file uses value analysis to check a set of intermediate of integer
# variables in a model-checking configuration.
# A bit-precise predicate analysis is used to cross-check
# counterexamples.
# ------------------------------------------------------------------


analysis.injectConcreteValues = true

analysis.summaryEdges = true

# enable use of multi-edges
cpa.composite.aggregateBasicBlocks = true

# ARGCPA is needed for counterexample analysis
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.value.ValueAnalysisCPA, cpa.hardloopbound.HardLoopBoundCPA

# we need to join, otherwise termination is not guaranteed (or takes really long!)
# cpa.value.merge = JOIN

cpa.hardloopbound.hardLoopbound = 3

# this automaton defines which locations are the error locations
specification = specification/default.spc

# BFS has shown to be a good traversal strategy for value analysis,
# so we use this by default
[analysis.traversal]
order = bfs
useReversePostorder = false
useCallstack = false

