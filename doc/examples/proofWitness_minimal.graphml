<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
 <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
 <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
  <default>false</default>
 </key>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
  <default>false</default>
 </key>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
 <key attr.name="endoffset" attr.type="int" for="edge" id="endoffset"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>doc/examples/loops__count_up_down_true_unreach_call_termination.c</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">correctness_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">InvGen</data>
  <data key="specification">// This automaton contains the specification of the
// Competition on Software Verification.
// It checks only for calls to the __VERIFIER_error() functions
// and also implements some functions which usually lead to a program abort.
CONTROL AUTOMATON SVCOMP

INITIAL STATE Init;

STATE USEFIRST Init :
  MATCH {__VERIFIER_error($?)} -&gt; ERROR("$rawstatement called in $location");
  MATCH {__assert_fail($?)} || MATCH {abort($?)} || MATCH {exit($?)} -&gt; STOP;

END AUTOMATON</data>
  <data key="programfile">doc/examples/loops__count_up_down_true_unreach_call_termination.c</data>
  <data key="programhash">f10a15afa2df531ef4edc08fff4e3a40d29bb88d</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2019-10-17T15:49:24+02:00</data>
 
 <node id="N9">
   <data key="entry">true</data>
  </node>
  <node id="N10"/>
  <edge source="N9" target="N10">
   <data key="startline">11</data>
   <data key="endline">11</data>
   <data key="startoffset">213</data>
   <data key="endoffset">223</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="N22"/>
  <edge source="N10" target="N22">
   <data key="enterLoopHead">true</data>
   <data key="startline">14</data>
   <data key="endline">14</data>
   <data key="startoffset">294</data>
   <data key="endoffset">296</data>
  </edge>
  <node id="N16">
   <data key="invariant"> (n = (x+y))</data>
   <data key="invariant.scope">main</data>
  </node>
  <edge source="N22" target="N16">
   <data key="startline">15</data>
   <data key="endline">15</data>
   <data key="startoffset">308</data>
   <data key="endoffset">310</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="N17">
   <data key="invariant"></data>
   <data key="invariant.scope">main</data>
  </node>
  <edge source="N22" target="N17">
   <data key="startline">15</data>
   <data key="endline">15</data>
   <data key="startoffset">308</data>
   <data key="endoffset">310</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="N1"/>
  <edge source="N17" target="N1">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="startoffset">346</data>
   <data key="endoffset">367</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <node id="N4">
   <data key="violation">true</data>
  </node>
  <edge source="N1" target="N4">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="startoffset">110</data>
   <data key="endoffset">113</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="N1" target="N4">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="startoffset">110</data>
   <data key="endoffset">113</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="N0"/>
  <edge source="N4" target="N0">
   <data key="startline">7</data>
   <data key="endline">7</data>
   <data key="startoffset">159</data>
   <data key="endoffset">165</data>
   <data key="returnFrom">__VERIFIER_assert</data>
  </edge>
  <node id="N24"/>
  <edge source="N0" target="N24">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="startoffset">346</data>
   <data key="endoffset">369</data>
  </edge>
  <edge source="N16" target="N22">
   <data key="enterLoopHead">true</data>
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">333</data>
   <data key="endoffset">335</data>
  </edge>
 </graph>
</graphml>
