/*
 *  CPAchecker is a tool for configurable software verification.
 *  This file is part of CPAchecker.
 *
 *  Copyright (C) 2007-2020  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.sosy_lab.cpachecker.cpa.extinvgen;

import com.google.common.collect.Multimap;
import com.google.common.collect.Sets;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.logging.Level;
import java.util.stream.Collectors;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.sosy_lab.common.ShutdownNotifier;
import org.sosy_lab.common.configuration.Configuration;
import org.sosy_lab.common.configuration.FileOption;
import org.sosy_lab.common.configuration.InvalidConfigurationException;
import org.sosy_lab.common.configuration.Option;
import org.sosy_lab.common.configuration.Options;
import org.sosy_lab.common.log.LogManager;
import org.sosy_lab.cpachecker.cfa.CFA;
import org.sosy_lab.cpachecker.cfa.CParser;
import org.sosy_lab.cpachecker.cfa.CProgramScope;
import org.sosy_lab.cpachecker.cfa.ast.AExpression;
import org.sosy_lab.cpachecker.cfa.ast.AFunctionDeclaration;
import org.sosy_lab.cpachecker.cfa.model.BlankEdge;
import org.sosy_lab.cpachecker.cfa.model.CFAEdge;
import org.sosy_lab.cpachecker.cfa.model.CFANode;
import org.sosy_lab.cpachecker.cfa.parser.Scope;
import org.sosy_lab.cpachecker.cfa.types.MachineModel;
import org.sosy_lab.cpachecker.core.AnalysisDirection;
import org.sosy_lab.cpachecker.core.Specification;
import org.sosy_lab.cpachecker.core.algorithm.invariants.invariantimport.SeahornInvariantGenerator;
import org.sosy_lab.cpachecker.core.defaults.AutomaticCPAFactory;
import org.sosy_lab.cpachecker.core.defaults.DelegateAbstractDomain;
import org.sosy_lab.cpachecker.core.defaults.StopSepOperator;
import org.sosy_lab.cpachecker.core.interfaces.AbstractDomain;
import org.sosy_lab.cpachecker.core.interfaces.AbstractState;
import org.sosy_lab.cpachecker.core.interfaces.CPAFactory;
import org.sosy_lab.cpachecker.core.interfaces.ConfigurableProgramAnalysis;
import org.sosy_lab.cpachecker.core.interfaces.MergeOperator;
import org.sosy_lab.cpachecker.core.interfaces.Precision;
import org.sosy_lab.cpachecker.core.interfaces.StateSpacePartition;
import org.sosy_lab.cpachecker.core.interfaces.StopOperator;
import org.sosy_lab.cpachecker.core.interfaces.TransferRelation;
import org.sosy_lab.cpachecker.cpa.automaton.CParserUtils;
import org.sosy_lab.cpachecker.cpa.automaton.CParserUtils.ParserTools;
import org.sosy_lab.cpachecker.exceptions.CPAException;
import org.sosy_lab.cpachecker.util.Pair;
import org.sosy_lab.cpachecker.util.expressions.ExpressionTree;
import org.sosy_lab.cpachecker.util.expressions.ExpressionTrees;
import org.sosy_lab.cpachecker.util.predicates.pathformula.ctoformula.CtoFormulaConverter;
import org.sosy_lab.cpachecker.util.predicates.pathformula.ctoformula.CtoFormulaTypeHandler;
import org.sosy_lab.cpachecker.util.predicates.pathformula.ctoformula.FormulaEncodingOptions;
import org.sosy_lab.cpachecker.util.predicates.smt.FormulaManagerView;
import org.sosy_lab.cpachecker.util.predicates.smt.Solver;
import org.sosy_lab.cpachecker.util.variableclassification.VariableClassification;

@Options(prefix = "cpa.extinvgen")
public class SeaHornInvToARGCPA implements ConfigurableProgramAnalysis {

  @Option(secure = true, description = "Path to auxillary invariants generated by Seahorn.")
  @FileOption(FileOption.Type.OPTIONAL_INPUT_FILE)
  @Nullable
  private Path path2InvFile = null;

  Map<CFANode, ExpressionTree<AExpression>> globalInvMap = new HashMap<>();

  private static final String TRUE = "true";
  private static final String FALSE = "false";
  CtoFormulaConverter converter;

  Configuration config;
  LogManager logger;
  ShutdownNotifier shutdownNotifier;
  CFA cfa;
  Specification specification;

  private AbstractDomain abstractDomain;

  /**
   * Gets a factory for creating InvariantCPAs.
   *
   * @return a factory for creating InvariantCPAs.
   */
  public static CPAFactory factory() {
    return AutomaticCPAFactory.forType(SeaHornInvToARGCPA.class);
  }

  public SeaHornInvToARGCPA(
      Configuration pConfig,
      LogManager pLogger,
      ShutdownNotifier pShutdownNotifier,
      CFA pCfa,
      Specification pSpecification)
      throws InvalidConfigurationException, CPAException {
    config = pConfig;
    logger = pLogger;
    shutdownNotifier = pShutdownNotifier;
    cfa = pCfa;
    specification = pSpecification;
    abstractDomain = DelegateAbstractDomain.<SeaHornInvToArgState>getInstance();

    try {
      SeahornInvariantGenerator generator = new SeahornInvariantGenerator(pConfig);
      List<Path> sourceFiles = pCfa.getFileNames();
      if (sourceFiles.size() != 1) {
        throw new InvalidConfigurationException(
            "Can onyl handle CFAs, where one source file is contained");
      }
      Multimap<Integer, Pair<String, String>> mapping;

      mapping = generator.genInvsAndLoad(sourceFiles.get(0), pCfa, pLogger);

      @SuppressWarnings("resource")
      Solver solver = Solver.create(pConfig, pLogger, pShutdownNotifier);

      FormulaManagerView fmgr = solver.getFormulaManager();

      FormulaEncodingOptions options = new FormulaEncodingOptions(pConfig);
      Optional<VariableClassification> a = Optional.of(VariableClassification.empty(pLogger));
      CtoFormulaTypeHandler pTypeHandler =
          new CtoFormulaTypeHandler(pLogger, pCfa.getMachineModel());
      converter =
          new CtoFormulaConverter(
              options,
              fmgr,
              pCfa.getMachineModel(),
              a,
              pLogger,
              pShutdownNotifier,
              pTypeHandler,
              AnalysisDirection.FORWARD);

      solver.close();

      if (this.path2InvFile == null) {
        File file = new File("/home/cppp/Documents/cpachecker/cpachecker/output/invars_in_c.txt");
        path2InvFile = file.toPath();
      }

      // Now, associate the invariants to the nodes:
      Map<Integer, Set<CFAEdge>> lineToEdgesOfMain = getMappingLinesToEdgesOfFunction(pCfa);

      // afterwards, find the node where the invariants belong to. If more than one, abort
      // Otherwise, add a path from entering node f main to that node

      // Get the edge containing the line number of the invariant, the starting node of the edge is
      // the desired one

      // FIXME: Since we only want to evaluate the cases where the invariant is in fact helpfull,
      // meaning that at least one invariant is non-trivial and hence unequal to "true/false", we
      // can
      // save computation time (for the first evaluation and abort, if only non-trivial invariants
      // are
      // generated:
      boolean nonTrivialInvariantGenerated = false;


      for (Entry<Integer, Pair<String, String>> inv : mapping.entries()) {

        if (inv.getValue().getSecond().strip().equalsIgnoreCase(TRUE)
            || inv.getValue().getSecond().strip().equalsIgnoreCase(FALSE)) {
          // No need to add true or false
          continue;
        }

        int lineNumber = inv.getKey();
        if (!lineToEdgesOfMain.containsKey(lineNumber)) {
          pLogger.log(
              Level.FINE,
              "Cannot parse the invariant, because no matching line number was found: "
                  + inv.toString());
          continue;
        }

        // Determine the minimal Start and maximal end offset for a given line (if there are more
        // statements present

        for (CFAEdge edge : lineToEdgesOfMain.get(lineNumber)) {
          ExpressionTree<AExpression> invariantInC =
              parseInv2Tree(inv.getValue().getSecond(), edge.getSuccessor().getFunction());

          if(! invariantInC.equals(ExpressionTrees.getTrue())) {
            nonTrivialInvariantGenerated = true;
          }
          globalInvMap.put(edge.getSuccessor(), invariantInC);

        }
      }
      if (!nonTrivialInvariantGenerated) {
        throw new CPAException("There were only trivila invariants generated, hence aborting");
      }
    } catch (IOException | InterruptedException e) {
      logger.log(Level.WARNING, "an error occured while parsing the invariants");
    }

  }

  private ExpressionTree<AExpression> parseInv2Tree(String pInv, AFunctionDeclaration function) {

    try {
      CParser parser =
          CParser.Factory.getParser(
              LogManager.createTestLogManager(),
              CParser.Factory.getDefaultOptions(),
              MachineModel.LINUX32,
              ShutdownNotifier.createDummy());
      ParserTools parserTools =
          ParserTools.create(ExpressionTrees.newFactory(), cfa.getMachineModel(), logger);
      Scope candidateScope = new CProgramScope(cfa, logger).withFunctionScope(function.getName());

      ExpressionTree<AExpression> invariant =
          CParserUtils.parseStatementsAsExpressionTree(
              Sets.newHashSet(pInv),
              Optional.of(function.getName()),
              parser,
              candidateScope,
              parserTools);

      return invariant;

      // FIXME: Handle the case where the invariant cannot be parsed (ture is returned)

    } catch (InterruptedException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
      return null;
    }

  }

  // private CExpression parseInv2C(String pInv, AFunctionDeclaration function) {
  // ExpressionTree<AExpression> invariant = parseInv2Tree(pInv, function);
  //
  // if (invariant instanceof LeafExpression) {
  // CExpression invInC =
  // (CExpression) ((LeafExpression<AExpression>) invariant).getExpression();
  // return invInC;
  //
  // } else {
  // throw new IllegalArgumentException("Seahorn cannot handle java expressions");
  // }
  // }



  @Override
  public AbstractDomain getAbstractDomain() {
    return abstractDomain;
  }

  @Override
  public TransferRelation getTransferRelation() {
    return new SeaHornInvToArgTransferRelation(globalInvMap, ExpressionTrees.getTrue());
  }

  @Override
  public MergeOperator getMergeOperator() {
    return new MergeOperator() {

      @Override
      public AbstractState merge(AbstractState pState1, AbstractState pState2, Precision pPrecision)
          throws CPAException, InterruptedException {
        return pState2;
      }
    };
  }

  @Override
  public StopOperator getStopOperator() {
    return new StopSepOperator(abstractDomain);
  }

  @Override
  public AbstractState getInitialState(CFANode pNode, StateSpacePartition pPartition)
      throws InterruptedException {
    return new SeaHornInvToArgState(globalInvMap, ExpressionTrees.getTrue(), pNode);
  }



  /**
   *
   * Computes for each source code line the edges associated to that line
   *
   * @param pCfa the cfa to search in
   * @return map containing the mapping
   */
  private Map<Integer, Set<CFAEdge>> getMappingLinesToEdgesOfFunction(CFA pCfa) {
    Map<Integer, Set<CFAEdge>> lineToEdgesOfMain = new HashMap<>();
    for (CFANode n : pCfa.getAllNodes()) {

      for (int i = 0; i < n.getNumEnteringEdges(); i++) {
        CFAEdge enteringEdge = n.getEnteringEdge(i);
        if (lineToEdgesOfMain.containsKey(enteringEdge.getLineNumber())) {
          lineToEdgesOfMain.get(enteringEdge.getLineNumber()).add(enteringEdge);
        } else {
          HashSet<CFAEdge> edges = new HashSet<>();
          edges.add(enteringEdge);
          lineToEdgesOfMain.put(enteringEdge.getLineNumber(), edges);
        }

      }
    }
    // Cleanup due to performance reasons
    cleanup(lineToEdgesOfMain);

    return lineToEdgesOfMain;
  }

  private void cleanup(Map<Integer, Set<CFAEdge>> pLineToEdgesOfMain) {
    // IF any location has an edge, that is an loop enter head, remove the other locations
    for (Entry<Integer, Set<CFAEdge>> entry : pLineToEdgesOfMain.entrySet()) {
      List<CFAEdge> loopHeads =
          entry.getValue()
              .parallelStream()
              .filter(edge -> edge instanceof BlankEdge && edge.getSuccessor().isLoopStart())
              .collect(Collectors.toList());
      if (loopHeads.size() > 0) {
        pLineToEdgesOfMain.replace(entry.getKey(), Sets.newHashSet(loopHeads.get(0)));
      }
    }

  }


}
